### ------------- PERSONAL PREFERENCE --------------###
# immediately append commands to bash history. Very cool and very legal.
shopt -s histappend # set filemode to append (is this needed?)
PROMPT_COMMAND="history -a; $PROMPT_COMMAND" # "The -a immediately writes the current/new lines to the history file."

alias vim="nvim"

# Better ctrl-r history search
export HSTR_CONFIG=hicolor       # get more colors
export HISTCONTROL=ignorespace   # leading space hides commands from history
export HSTR_CONFIG=raw-history-view # show history list by default
export HISTFILESIZE=100000        # increase history file size (default is 500)
export HISTSIZE=${HISTFILESIZE}  # increase history size (default is 500)
function hstrnotiocsti {
    { READLINE_LINE="$( { </dev/tty hstr ${READLINE_LINE}; } 2>&1 1>&3 3>&- )"; } 3>&1;
    READLINE_POINT=${#READLINE_LINE}
}
# if this is interactive shell, then bind hstr to Ctrl-r (for Vi mode check doc)
if [[ $- =~ .*i.* ]]; then bind -x '"\C-r": "hstrnotiocsti"'; fi
export HSTR_TIOCSTI=n
# if this is interactive shell, then bind 'kill last command' to Ctrl-x k
# if [[ $- =~ .*i.* ]]; then bind '"\C-xk": "\C-a hstr -k \C-j"'; fi

# To show real-time log while booting and shutting down, edit
# /etc/default/grub
# change
# GRUB_CMDLINE_LINUX_DEFAULT="quiet splash"
# to
# GRUB_CMDLINE_LINUX_DEFAULT=""

# Gitview (Pretty Git Log)
alias gitview="git log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold cyan)%aD%C(reset) %C(bold green)(%ar)%C(reset)%C(bold yellow)%d%C(reset)%n''          %C(white)%s%C(reset) %C(dim white)- %an%C(reset)' --all"

# git_watch
export PATH="$HOME/Code/git-watch:$PATH"

# Functions to jump straight to a workspace
workondirectory() {
  cd $1
  git fetch &
  tree
  git status
}

# function to list tmux sessions and easily attach to one
# tm() {
#   # if no arguments, list sessions
#   if [ $# -eq 0 ]; then
#     echo 'TMUX SESSIONS (tm 0 - attach, C-b d - detach):'
#     tmux ls
#   fi
#   # if an argument is given, attach to that session
#   if [ $# -eq 1 ]; then
#     tmux attach-session -t $1 || echo "tmn to make new session"
#   fi
# }

tm() {
  # Check if -n flag is present
  if [[ "$@" == *"-n"* ]]; then
    # Remove -n from arguments
    args=(${@/-n/})
    
    # If a session name is provided, create it
    if [ ${#args[@]} -eq 1 ]; then
      tmux new -s ${args[0]}
    else
      # If no session name is provided, create an unnamed session
      tmux new
    fi
  else
    # If no arguments are provided, list sessions
    if [ $# -eq 0 ]; then
      echo 'TMUX SESSIONS (tm 0 - attach, C-b d - detach):'
      tmux ls
    else
      # If an argument is given, try to attach to the session
      tmux attach-session -t $1 || echo "Session $1 not found. Use 'tm -n' to create a new session."
    fi
  fi
}

# tmn() {
#   tmux new -s $1
# }

# tmux copy mode
tmc() {
  tmux copy-mode
}

# Tree + du
tree_count() {
  local depth=3
  local show_files=false
  local show_sizes=false

  # Parse arguments
  while [[ "$1" ]]; do
    case "$1" in
      --show-files) show_files=true ;;
      --show-sizes) show_sizes=true ;;
      [0-9]*) depth="$1" ;;
    esac
    shift
  done

  local base="./"
  mapfile -t dirs < <(find "$base" -mindepth 1 -maxdepth "$depth" -type d | sort)

  for i in "${!dirs[@]}"; do
    dir="${dirs[$i]}"
    rel="${dir#./}"
    IFS='/' read -r -a parts <<< "$rel"
    level=${#parts[@]}

    # ‚îÄ‚îÄ‚îÄ Indentation ‚îÄ‚îÄ‚îÄ
    prefix=""
    for ((j = 0; j < level - 1; j++)); do
      parent=$(IFS=/; echo "${parts[@]:0:j+1}")
      has_sibling=false
      for ((k = i + 1; k < ${#dirs[@]}; k++)); do
        next="${dirs[$k]#./}"
        [[ "$next" == "$parent/"* ]] || continue
        IFS='/' read -r -a nparts <<< "$next"
        (( ${#nparts[@]} == j + 2 )) && has_sibling=true && break
      done
      prefix+=$($has_sibling && echo "‚îÇ   " || echo "    ")
    done

    # ‚îÄ‚îÄ‚îÄ Connector ‚îÄ‚îÄ‚îÄ
    this_parent=$(IFS=/; echo "${parts[@]:0:level-1}")
    is_last=true
    for ((k = i + 1; k < ${#dirs[@]}; k++)); do
      next_rel="${dirs[$k]#./}"
      [[ "$next_rel" == "$this_parent/"* ]] || continue
      IFS='/' read -r -a nparts <<< "$next_rel"
      (( ${#nparts[@]} == level )) && is_last=false && break
    done
    connector=$($is_last && echo "‚îî‚îÄ‚îÄ" || echo "‚îú‚îÄ‚îÄ")

    # ‚îÄ‚îÄ‚îÄ Count files and subdirs ‚îÄ‚îÄ‚îÄ
    fcount=$(find "$dir" -type f | wc -l)
    dcount=$(find "$dir" -type d | wc -l)

    # ‚îÄ‚îÄ‚îÄ Directory size (optional) ‚îÄ‚îÄ‚îÄ
    size=""
    $show_sizes && size=" ($(du -sh "$dir" 2>/dev/null | cut -f1))"

    echo "${prefix}${connector} üìÅ ${parts[-1]} ‚Äî $fcount files, $((dcount - 1)) subdirs${size}"

    # ‚îÄ‚îÄ‚îÄ Immediate file listing ‚îÄ‚îÄ‚îÄ
    if $show_files && (( level < depth )); then
      mapfile -t files < <(find "$dir" -maxdepth 1 -mindepth 1 -type f | sort)
      for ((fidx=0; fidx<${#files[@]}; fidx++)); do
        fname=$(basename "${files[$fidx]}")
        fconn=$([[ $fidx -eq $((${#files[@]} - 1)) ]] && echo "‚îî‚îÄ‚îÄ" || echo "‚îú‚îÄ‚îÄ")
        echo "${prefix}    ${fconn} üìÑ $fname"
      done
    fi
  done
}

# function to get directory size and # of files recursively
# dirsize
#   shows size of all dirs in current dir
# dirsize mydir
#   shows size for mydir
dirsize() {
    local total_cumulative_files=0
    local total_cumulative_dirs=0
    local total_cumulative_size=0.0

    # If no arguments, show size of all dirs in current dir
    if [ $# -eq 0 ]; then
        set -- ./*
    fi

    # Header
    printf "%-40s %10s %10s %10s\n" "Directory" "Files" "Directories" "Size (GB)"
    printf "%s\n" "$(printf '=%.0s' {1..72})"

    # Process each directory
    for path in "$@"; do
        # Resolve full path
        full_path=$(readlink -f "$path")

        # Count files
        local dir_files=$(find "$full_path" -type f 2>/dev/null | wc -l)

        # Count directories
        local dir_dirs=$(find "$full_path" -type d 2>/dev/null | wc -l)

        # Calculate size in GB
        local dir_size=$(du -sb "$full_path" 2>/dev/null | awk '{printf "%.2f", $1/1024/1024/1024}')

        # Print per-directory stats
        # printf "%-40s %10d %10d %10.2f\n" "${full_path}" "$dir_files" "$dir_dirs" "$dir_size"
        printf "${full_path}\n"
        printf "%-40s %10d %10d %10.2f\n" "" "$dir_files" "$dir_dirs" "$dir_size"

        # Accumulate totals
        total_cumulative_files=$((total_cumulative_files + dir_files))
        total_cumulative_dirs=$((total_cumulative_dirs + dir_dirs))
        total_cumulative_size=$(echo "$total_cumulative_size + $dir_size" | bc)
    done

    # Print cumulative totals
    printf "%s\n" "$(printf '=%.0s' {1..72})"
    printf "%-40s %10s %10s %10s\n" "" "Files" "Directories" "Size (GB)"
    printf "%-40s %10d %10d %10.2f\n" "TOTAL" "$total_cumulative_files" "$total_cumulative_dirs" "$total_cumulative_size"
}

# Default editors
export EDITOR=nvim
export VISUAL=nvim

# Source my personal python packages
# export PYTHONPATH="$HOME/Code/pyniel:$PYTHONPATH"

# Aliases
alias prometheus="ssh daniel@129.132.39.77"
alias ml3env="source ~/ml3/bin/activate"
alias segmappyenv="source ~/segmappyenv/bin/activate"
alias peppervenv="source ~/peppervenv/bin/activate"
alias wopepper="source ~/peppervenv/bin/activate && source ~/Code/pepper_ws/devel/setup.bash && roscd asl_pepper_motion_planning/.. && git status"
alias woia="wopepper && roscd ia_ros && cd .. && git status"
alias wonavrep="source ~/pepper3venv/bin/activate && cd ~/Code/pepper_ws/src/navrep && git status"
# alias wolivenavrep="source ~/Code/pepper_ws/devel/setup.bash && source ~/pepper3venv/bin/activate && cd ~/Code/navrep && git status"
alias wonori="cd ~/Code/nori && git status"
alias wocbc="cd ~/Code/cbsim/navrep3d && source ~/cbc3env/bin/activate"
alias won3d="cd ~/Code/cbsim/navrep3d && source ~/n3denv/bin/activate"
alias woflowbot="source ~/Code/flowbot_ws/devel/setup.bash && cd ~/Code/CrowdBotChallenge/Crowdbotsim_python/crowdbotsimcontrol && source ~/peppervenv/bin/activate"
alias wopred="cd ~/Code/predictive/Crowdbotsim_python/crowdbotsimcontrol && source ~/javadenv/bin/activate"
alias wofileworld="cd ~/Code/fileworld && source ~/fileworldenv/bin/activate"
alias woturtlebot="export TURTLEBOT3_MODEL=burger && export ROS_MASTER_URI=http://10.253.160.102:11311 && export ROS_HOSTNAME=10.253.160.102 && source ~/peppervenv/bin/activate && source /opt/ros/melodic/setup.bash && cd ~/Code/turtlebot_ws/src/circle_patroller && source ~/Code/turtlebot_ws/devel/setup.bash"
alias wovitrified="cd ~/Code/Vitrified-Code && git status"
alias woros="source /opt/ros/melodic/setup.bash"
alias wolian="cd ~/Code/LIAN && source ~/cbc3env/bin/activate && source ~/Code/pepper_ws/devel/setup.bash && git status"
# alias womesh="source ~/Code/mesh_ws/devel/setup.bash && cd ~/Code/mesh_ws/src/mesh_sim"
alias womesh="source ~/meshenv/bin/activate && source ~/catkin_ws/devel/setup.bash && cd ~/catkin_ws/src/production"
alias worebotic="source ~/meshenv/bin/activate && source ~/catkin_ws/devel/setup.bash && cd ~/catkin_ws/src/rebotic_operator_interface"
alias woschema="source ~/meshenv/bin/activate && source ~/catkin_ws/devel/setup.bash && cd ~/catkin_ws/src/schema"
alias wodeepmimic="source ~/Code/DeepMimic_mujoco/xenv/bin/activate && export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/home/daniel/.mujoco/mujoco210/bin:/usr/lib/nvidia && cd ~/Code/DeepMimic_mujoco/src"
# alias woh1="source ~/h1env/bin/activate && source ~/unitree_ros2/setup.sh && cd ~/Code/unitree_h1_locomotion/"
alias woh1="cd ~/Code/hm-locomotion/modules/h1_loco_ros && source ~/h1env/bin/activate && source ~/unitree_ros2/setup.sh && source ~/Code/hm-locomotion/modules/h1_loco_ros/install/setup.sh "
alias coh1="code ~/Code/hm-locomotion/modules/h1_loco_ros && exit"
# other
alias cdpepper="cd ~/Code/pepper_ws/src/asl_pepper/asl_pepper_motion_planning/"
alias swim="nautilus . &"
alias jpnb="jupyter notebook"
alias pythoncprofile="python -m cProfile -o program.prof"
alias crowdbotchallenge="cd ~/Code/CrowdBotChallenge/executables/Linux_ETH_cbc_master && ./build.x86_64"
alias trainstationsim="wopepper && cd ~/Code/cbsim/CrowdBotUnity/catkin_crowdbotsim/src/crowdbotsim/scripts/ && rosparam set use_sim_time true &&  ./ros_sim_node"
# alias roslaunch="mon launch --output-attr=obey"
alias monlaunch="mon launch --output-attr=obey"
alias py="ml3env && ipython --pylab -c \"import pandas as pd\" -i" # Quick mathematical python
alias gtop="watch -n 1 nvidia-smi"
rm() {
    if [[ $@ == "-rf ~" ]]; then
        echo "HELL NO"
    elif [[ $@ == "-rf /" ]]; then
        echo "OH HELL NO"
    else
        command rm "$@"
    fi
}

export PATH="$HOME/Code/simple-sync:$PATH"

# Replace the PS1 setup lines with this in code above to enable git branch display
function parse_git_branch () {
  git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/ (\1)/'
}
function parse_ros_ws () {
#   echo $PKG_CONFIG_PATH | sed -e 's/\/home\/daniel\/Code\///' | sed -e 's/\/opt\/ros\///' | sed -e 's/\/.*$//'
  echo $PKG_CONFIG_PATH \
    | sed -e 's/:.*$//' \
    | sed -e 's/.*\/\(.*\)\/devel\/.*$/\1 /' \
    | sed -e 's/\/opt\/ros\/kinetic\/.*$/kinetic /' \
    | sed -e 's/\/opt\/ros\/melodic\/.*$/melodic /' \
    | sed -e 's/\/opt\/ros\/noetic\/.*$/noetic /' \
    | sed -e 's/.*\/.*$/? /'
    # delete everything after first ':'
    # replace with parent dir of devel 
    # or kinetic if /opt/ros/kinetic
    # or melodic if /opt/ros/melodic
    # or noetic if /opt/ros/noetic
    # if a '/' is still found, erase everything
}
PREV_PS1=$PS1
PS1='\[\033[01;33m\]$(parse_ros_ws)\[\033[00m\]${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]$(parse_git_branch)\$ '

# Run this only once if application windows don't get foregrounded when you launch the application:
# dconf write /org/compiz/profiles/unity/plugins/core/focus-prevention-level 0

# Create personal man pages
umedit() {
  mkdir -p ~/man;
  if [ -z "$1" ]; then
    echo "no name specified"
  else
    nvim ~/man/"$1.txt";
  fi
}
um() { 
  if [ -z "$1" ]; then
    echo "Manuals for the following functions are available: "
    ls ~/man | sed -e 's/\.txt//g'
  else
    nvim -R $HOME/man/"$1.txt"
  fi
}
template() {
  if [ -z "$1" ]; then
    echo "Available templates: "
    tree ~/templates
  else
    nvim ~/templates/"$1".*
  fi
}
logbook() {
  nvim ~/logbook/$(date +'%Y%m%d.txt')
}

# Find which wallpaper based on watermark
whichwallpaper() {
  ls "$HOME/Pictures/Wallpaper/EarthviewWallpapersWatermarked" | grep "$1"
}

# yesno now in /usr/bin/

notify() {
  $*
  spd-say "it is done."
}

solomon-notify() {
  $*
  retcode=$?
  if [ $retcode -eq 0 ]; then
    telegram-send "Huzzah! Your command,"
    telegram-send ">> $*"
    telegram-send "returns triumphant."
  else
    telegram-send "Treachery! Your command,"
    telegram-send ">> $*"
    telegram-send "returns defeated."
  fi
}

euler-notify() {
  echo "waiting for following jobs to be done:"
  ssh dugasd@euler.ethz.ch -q -t "bjobs $1"
  while [ 1 ]
  do
    { ssh dugasd@euler.ethz.ch -q -t "bjobs $1" | grep "\(RUN\)\|\(PEND\)" >> /dev/null ; } \
      || { solomon-notify echo "euler job $1 done. $2" && break ; }
    sleep 600
  done
}

leonhard-notify() {
  echo "waiting for following jobs to be done:"
  ssh dugasd@login.leonhard.ethz.ch -q -t "bjobs $1"
  while [ 1 ]
  do
    { ssh dugasd@login.leonhard.ethz.ch -q -t "bjobs $1" | grep "\(RUN\)\|\(PEND\)" >> /dev/null ; } \
      || { solomon-notify echo "leonhard job $1 done. $2" && break ; }
    sleep 600
  done
}

remove_empty_dirs() {
  find ${1:-$PWD} -depth -mindepth 1 -type d -empty -ok rmdir {} \;
}

bigfiles() {
 find . -type f -exec du -ha {} + | sort -h
}

localmaster() {
  unset ROS_MASTER_URI
  unset ROS_IP
}

# git config --global user.name "Daniel Dugas"
# git config --global user.email "daniel@dugas.ch"


### ------------- COMPUTER SPECIFIC  --------------###

### T480_U24

if [ $MACHINE_NAME = T480_U24 ]; then
  source ~/uplink/AWS/hm_aws.sh
fi
###     oceanus
if [ $MACHINE_NAME = oceanus ]; then
  git-watch --quiet 1>/dev/null &
  git-watch --bad-only --no-fetch
# added by Anaconda2 4.0.0 installer
  export PATH="$HOME/anaconda2/bin:$PATH"
fi

###     atlas (omen RTX 3060)
if [ $MACHINE_NAME = atlas ]; then

  git-watch --quiet 1>/dev/null &
  git-watch --bad-only --no-fetch
  export PATH=/usr/local/cuda/bin${PATH:+:${PATH}}
  alias vim="nvim"
  source ~/uplink/AWS/navrep3d_aws.sh

  # TMUX stuff (can be removed if no longer remoting
  alias tm0="tmux attach-session -t 0"
  echo ' '
  echo 'TMUX SESSIONS (tm0 - attach, C-b d - detach):'
  tmux ls
fi

###     prometheus
if [ $MACHINE_NAME = prometheus ]; then

  git-watch --quiet 1>/dev/null &
  git-watch --bad-only --no-fetch
  # Matlab
  alias matlab="/usr/local/MATLAB/R2018a/bin/matlab"
  # Pepper ros project
#   source ~/Code/pepper_ws/devel/setup.bash
#   export PYTHONPATH="$PYTHONPATH:$HOME/Code/pynaoqi-python2.7-2.5.5.5-linux64/lib/python2.7/site-packages"
  # Segmap ros project
  alias source_segmap="source ~/Code/segmatch_ws/devel/setup.bash"
  alias wosegmap="source_segmap && roscd segmapper && cd .."
  alias vim="nvim"
  # Group share
  mountgroupshare() {
    mkdir -p /media/groupserver
    echo "Password for ETH ASL group share (mystudies password): "
    read -s password
    sudo mount -t cifs -o vers=2.0,username=dugasd,password=$password //nas12.ethz.ch/mavt_iris_asl_1 /media/groupserver/
  }

  # TMUX stuff (can be removed if no longer remoting
  alias tm0="tmux attach-session -t 0"
  alias tm1="tmux attach-session -t 1"
  alias tm2="tmux attach-session -t 2"
  alias tm3="tmux attach-session -t 3"
  echo ' '
  echo 'TMUX SESSIONS (tm0 - attach, C-b d - detach):'
  tmux ls

  export PATH=/usr/local/cuda/bin${PATH:+:${PATH}}
  source ~/uplink/AWS/navrep3d_aws.sh
fi

### Mythos (mesh office ubuntu 20)
if [ $MACHINE_NAME = mythos ]; then

  git-watch --quiet 1>/dev/null &
  git-watch --bad-only --no-fetch
  alias vim="nvim"

  # TMUX stuff (can be removed if no longer remoting
  alias tm0="tmux attach-session -t 0"
  alias tm1="tmux attach-session -t 1"
  alias tm2="tmux attach-session -t 2"
  alias tm3="tmux attach-session -t 3"
  echo ' '
  echo 'TMUX SESSIONS (tm0 - attach, C-b d - detach):'
  tmux ls
fi

###     Pepper laptop
if [ $MACHINE_NAME = pepper_laptop ]; then
# Disable trackpad kinetic scrolling - Moved to .gnomerc
#   synclient CoastingSpeed=10000
#   synclient CoastingFriction=10000
  git-watch --quiet 1>/dev/null &
  git-watch --bad-only --no-fetch
  alias vim="nvim"
  export PYTHONPATH="$PYTHONPATH:$HOME/Code/pynaoqi-python2.7-2.5.7.1-linux64/lib/python2.7/site-packages"
  alias activateboostmode1000="sudo ethtool -s enp0s31f6 speed 1000 duplex full"
  export DEFAULT_ETH_INTERFACE="enp0s31f6"
  export PEPPER_IP="10.42.0.49"
  source ~/uplink/AWS/navrep3d_aws.sh
fi

###     T480
if [ $MACHINE_NAME = hermes ]; then
  git-watch --quiet 1>/dev/null &
  git-watch --bad-only --no-fetch
  alias vim="nvim"
  export PYTHONPATH="$PYTHONPATH:$HOME/Code/pynaoqi-python2.7-2.5.7.1-linux64/lib/python2.7/site-packages"
  export DEFAULT_ETH_INTERFACE="enp0s31f6"
  export PEPPER_IP="10.42.0.49"
  source ~/uplink/AWS/navrep3d_aws.sh
fi

###     MESH T480
if [ $MACHINE_NAME = mesht480 ]; then
  git-watch --quiet 1>/dev/null &
  git-watch --bad-only --no-fetch
  alias vim="nvim"
  alias woros="source /opt/ros/noetic/setup.bash"
  source ~/uplink/AWS/navrep3d_aws.sh

  # Remote master, uncomment for local master
  RED='\033[0;31m'
  NC='\033[0m' # No Color
#   echo -e "-- ${RED}RM${NC} (change: localmaster) --"
#   export ROS_MASTER_URI="http://192.168.1.13:11311"
  export ROS_IP="192.168.1.200"
fi

###     europalaptop
if [ $MACHINE_NAME = europa_laptop ]; then
  git-watch --quiet 1>/dev/null &
  git-watch --bad-only --no-fetch
fi

###     bigboy (europalaptop ubuntu18)
if [ $MACHINE_NAME = bigboy ]; then
  git-watch --quiet 1>/dev/null &
  git-watch --bad-only --no-fetch
  export PYTHONPATH="$PYTHONPATH:$HOME/Code/pynaoqi-python2.7-2.5.7.1-linux64/lib/python2.7/site-packages"
  export DEFAULT_ETH_INTERFACE="enp0s25"
  export PEPPER_IP="10.42.0.84"
fi

###     Cronus (T420)
if [ $MACHINE_NAME = cronus ]; then
# Disable trackpad kinetic scrolling - Moved to .gnomerc
#   synclient CoastingSpeed=10000
#   synclient CoastingFriction=10000
  git-watch --quiet 1>/dev/null &
  git-watch --bad-only --no-fetch
fi

# Cluster
if [ $MACHINE_NAME = leonhard ]; then
  # put this in .bash_profile instead
  # echo "How to install arbitrary python modules in a gpu node"
  # echo "1.) bsub -Is -W 4:00 -R \"rusage[ngpus_excl_p=1, mem=4096]\" bash"
  # echo "2.) module load eth_proxy python_gpu/3.6.4"
  # echo "3.) pip install --user tensorflow_gpu==1.12.0"
  alias interactivejob="bsub -Is -W 4:00 -R \"rusage[ngpus_excl_p=1, mem=4096]\" bash"
fi

if [ $MACHINE_NAME = amazon ]; then
  alias tm0="tmux attach-session -t 0"
  alias tm1="tmux attach-session -t 1"
  alias tm2="tmux attach-session -t 2"
  alias tm3="tmux attach-session -t 3"
  echo ' '
  echo 'TMUX SESSIONS (tm0 - attach, C-b d - detach):'
  tmux ls
fi

if [ $MACHINE_NAME = FAIR_H100_2 ]; then
  export PS1=$PREV_PS1
  export PS1=${PS1::-3}'$(parse_git_branch)\$ '
  alias vim=vim

  export WANDB_USERNAME=eai-foundations

  alias gitview="git log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold          cyan)%aD%C(reset) %C(bold green)(%ar)%C(reset)%C(bold yellow)%d%C(reset)%n''%C(white)%s%C(reset) %C(dim white)-        %an%C(reset)' --all"

  alias sq="watch -n 10 squeue --me"
  alias susage="python ~/cluster_status.py --account cortex"
  alias sr="srun --account cortex -q cortex_high -t 03:00:00 --gpus 1 --pty /bin/bash"

  alias wodino="conda activate rwm && cd ~/Code/robot_world_models/train_dinowm"
  alias worwm="conda activate rwm && cd ~/Code/robot_world_models"
  alias wonwm="conda activate nwm && cd ~/Code/robot_world_models/train_nwm"
  alias wost="conda activate rwm && cd ~/Code/robot_world_models/robot-actions"

  export ACCEL_CORTEX_PATH=/data/home/dud/accel-cortex
  export DATASET_DIR=/checkpoint/cortex/datasets01/
  export JEPA_HOME=~/Code/jepa-internal
  export DINO_HOME=~/Code/robot_world_models/train_dinowm
  export COSMOS_HOME=~/Code/Cosmos
  export CORTEX_SHARE_DIR=/checkpoint/cortex/
  export UNIXNAME=dud
  export EDITOR=vim
  bind '"\C-r": reverse-search-history'

  # export PATH=/usr/local/cuda-12.4/bin/:$PATH
  # export LD_LIBRARY_PATH=/usr/local/cuda-12.4/lib64:$LD_LIBRARY_PATH
  export PATH=$PATH:/usr/local/cuda-12.4/bin/
  export LD_LIBRARY_PATH=/usr/local/cuda-12.4/lib64
fi

if [ $MACHINE_NAME = FAIR_A100 ]; then
  export PS1=$PREV_PS1
  export PS1=${PS1::-3}'$(parse_git_branch)\$ '
  alias vim=vim

  export WANDB_USERNAME=eai-foundations
  
  alias gitview="git log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold cyan)%aD%C(reset) %C(bold green)(%ar)%C(reset)%C(bold yellow)%d%C(reset)%n''%C(white)%s%C(reset) %C(dim white)- %an%C(reset)' --all"
  
  alias sq="watch -n 10 squeue --me"
  alias susage="python ~/accel-cortex/scripts/cluster_status.py --account cortex"
  alias sr="echo srun --account cortex -q cortex_high --nodes=1 --ntasks-per-node=1 --gpus-per-node=1 --cpus-per-task=12 --mem=1024G --time-min=600 --pty /bin/bash"
  
  alias wolam3d="conda activate sergio-accel"

  alias wodino="conda activate rwm && cd ~/Code/robot_world_models/train_dinowm"
  alias worwm="conda activate rwm && cd ~/Code/robot_world_models"
  alias wonwm="conda activate nwm && cd ~/Code/robot_world_models/train_nwm"
  alias wost="conda activate rwm && cd ~/Code/robot_world_models/robot-actions"

  
  export ACCEL_CORTEX_PATH=/data/home/dud/accel-cortex
  export DATASET_DIR=/fsx-cortex-datacache/shared/datasets
  export JEPA_HOME=~/Code/jepa-internal
  export DINO_HOME=~/Code/robot_world_models/train_dinowm
  export COSMOS_HOME=~/Code/Cosmos
  export CORTEX_SHARE_DIR=/fsx-cortex
  export UNIXNAME=dud
  export EDITOR=vim

  export PATH=$PATH:/usr/local/cuda-12.4/bin/
  export LD_LIBRARY_PATH=/usr/local/cuda-12.4/lib64

  bind '"\C-r": reverse-search-history'

  tm
fi
# temporary storage for often run commands
# roslaunch ia_ros ros_ia_node.launch rosbag:=multiagent_sim_iros mapname:=asl mapfolder:=$HOME/Code/pepper_ws/src/interaction_actions/python/maps n_downsampling_passes:=0 localization:=false script_args:="--no-stop"
# roslaunch asl_pepper_move_base move_base.launch rosbag:=multiagent_sim_iros mapname:=asl mapfolder:=$HOME/Code/pepper_ws/src/interaction_actions/python/maps

# sim (unity scene) + ia, using sim_map as reference
# roslaunch ia_ros ros_ia_node.launch rosbag:=multiagent_sim_unity mapname:=unity_scene_map mapfolder:=$HOME/maps n_downsampling_passes:=0 localization:=false script_args:="--no-stop"
# sim (unity scene) + move base, using sim_map as ref
# roslaunch asl_pepper_move_base move_base.launch rosbag:=multiagent_sim_unity mapname:=unity_scene_map mapfolder:=$HOME/maps
